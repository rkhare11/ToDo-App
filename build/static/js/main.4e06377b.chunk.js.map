{"version":3,"sources":["components/Button.js","utils.js","components/Input.js","App.js","serviceWorker.js","index.js"],"names":["GenericButton","color","icon","iconStyle","label","onClick","style","type","Button","name","inputTypes","groupTypes","modalModes","placeholders","getInputSpec","id","onChange","options","placeholder","readonly","minLength","maxLength","labelStyle","GenericInput","readOnly","value","Label","htmlFor","Input","length","map","option","App","onSearchChange","evt","setState","search","target","onGroupByChange","groupBy","toggleModal","mode","this","state","groupByOptions","groupBySpec","searchSpec","undefined","className","bind","React","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4e06377b.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Button } from \"reactstrap\";\r\nimport PropTypes from \"prop-types\";\r\nimport FontAwesome from \"react-fontawesome\";\r\n\r\n// Getting different kinds of props from the parent component\r\n// makes this Button component a HIGHLY REUSABLE COMPONENT which\r\n// can be used as any kind of a button\r\n \r\nexport const GenericButton = ({color, icon, iconStyle, label, onClick, style, type, ...rest}) => {\r\n    return (\r\n        <Button type={type} style={style} color={color} onClick={onClick}>\r\n            {\r\n                icon && <FontAwesome style={iconStyle} name={icon}/>\r\n            }\r\n            {\r\n                label\r\n            }\r\n        </Button>\r\n    );\r\n}\r\n\r\nGenericButton.propTypes = {\r\n    icon: PropTypes.string,\r\n    type: PropTypes.string,\r\n    onClick: PropTypes.func.isRequired,\r\n    label: PropTypes.string,\r\n    color: PropTypes.string.isRequired,\r\n    style: PropTypes.object,\r\n    iconStyle: PropTypes.object\r\n}","import React from \"react\";\r\n\r\nexport const inputTypes = {\r\n    CHECKBOX: \"checkbox\",\r\n    COLOR: \"color\",\r\n    DATE: \"date\",\r\n    DATE_TIME_LOCAL: \"datetime-local\",\r\n    EMAIL: \"email\",\r\n    FILE: \"file\",\r\n    HIDDEN: \"hidden\",\r\n    IMAGE: \"image\",\r\n    NUMBER: \"number\",\r\n    PASSWORD: \"password\",\r\n    RADIO: \"radio\",\r\n    RANGE: \"range\",\r\n    TEXT: \"text\",\r\n    TEXTAREA: \"textarea\",\r\n    SELECT: \"select\",\r\n}\r\n\r\nexport const priorityTypes =  {\r\n    NONE:  \"none\",\r\n    LOW: \"low\",\r\n    MEDIUM: \"medium\",\r\n    HIGH: \"high\",\r\n}\r\n\r\nexport const groupTypes = {\r\n    NONE: \"none\",\r\n    CREATED_ON: \"createdOn\",\r\n    PENDING_ON: \"pendingOn\",\r\n    PRIORITY: \"priority\",\r\n}\r\n\r\nexport const modalModes = {\r\n    NEW: \"new\",\r\n    EDIT: \"edit\",\r\n    READ_ONLY: \"readonly\"\r\n}\r\n\r\nexport const placeholders = {\r\n    SEARCH: \"Search Tasks\",\r\n    SUMMARY: \"Summary\",\r\n    DESCRIPTION: \"Description\",\r\n}\r\n\r\nexport const getTableRow = (item, index) => {\r\n    const {dataItem} = item;\r\n    return (\r\n        <tr onClick={() => item.onClick(index)}>\r\n            {\r\n                <>\r\n                    {\r\n                        Object.values(dataItem).map((key) => (\r\n                            <td>{dataItem[key]}</td>\r\n                        ))\r\n                    }\r\n                    <td>\r\n                        {item.buttons}\r\n                    </td>\r\n                </>\r\n            }\r\n        </tr>\r\n    );\r\n}\r\n\r\nexport const getInputSpec = (id, name, type, label, onChange, options, placeholder, readonly, minLength, maxLength, style, labelStyle) => {\r\n    return {\r\n        name,\r\n        id,\r\n        type,\r\n        label,\r\n        options,\r\n        minLength,\r\n        maxLength,\r\n        style,\r\n        labelStyle,\r\n        onChange,\r\n        placeholder,\r\n        readonly\r\n    }\r\n}","import React from \"react\";\r\nimport { Input, Label } from \"reactstrap\";\r\nimport PropTypes from \"prop-types\";\r\nimport { inputTypes } from \"../utils\";\r\n\r\nexport const GenericInput = ({\r\n    id,\r\n    label,\r\n    labelStyle,\r\n    minLength,\r\n    maxLength,\r\n    name,\r\n    onChange,\r\n    options,\r\n    placeholder,\r\n    readOnly,\r\n    style,\r\n    type,\r\n    value,\r\n    ...rest\r\n}) => {\r\n\r\n    return (\r\n        <>\r\n            {label && <Label htmlFor={name} style={labelStyle}>{label}</Label>}\r\n            <Input\r\n                minLength={minLength}\r\n                maxLength={maxLength}\r\n                placeholder={placeholder}\r\n                type={type} style={style}\r\n                value={value}\r\n                id={id}\r\n                name={name}\r\n                onChange={onChange}\r\n                readOnly={readOnly}\r\n            >\r\n                {\r\n                    type === inputTypes.SELECT && options && options.length > 0 &&\r\n                    options.map((option) => (\r\n                        <option value={option.value}>{option.label}</option>\r\n                    ))\r\n                }\r\n            </Input>\r\n        </>\r\n    );\r\n\r\n}\r\n\r\nGenericInput.propTypes = {\r\n    id: PropTypes.string.isRequired,\r\n    label: PropTypes.string,\r\n    labelStyle: PropTypes.object,\r\n    maxLength: PropTypes.number,\r\n    minLength: PropTypes.number,\r\n    name: PropTypes.string,\r\n    onChange: PropTypes.func.isRequired,\r\n    options: PropTypes.arrayOf(PropTypes.object),\r\n    placeholder: PropTypes.string,\r\n    readOnly: PropTypes.bool,\r\n    style: PropTypes.object,\r\n    type: PropTypes.string.isRequired,\r\n    value: PropTypes.any.isRequired,\r\n}","import React from 'react';\nimport './App.css';\nimport { GenericButton } from './components/Button';\nimport { modalModes, getInputSpec, groupTypes, inputTypes, placeholders } from './utils';\nimport { GenericInput } from './components/Input';\n\nclass App extends React.component {\n  \n    render () {\n      const { groupBy, search } = this.state;\n      const groupByOptions = [\n          {\n              value: groupTypes.NONE,\n              label: \"None\"\n          },\n          {\n              value: groupTypes.CREATED_ON,\n              label: \"Created On\"\n          },\n          {\n              value: groupTypes.PENDING_ON,\n              label: \"Pending On\"\n          },\n          {\n              value: groupTypes.PRIORITY,\n              label: \"Priority\"\n          }\n      ];\n      const groupBySpec = getInputSpec(\"groupBy\", \"groupBy\", inputTypes.SELECT, \"Group By\", this.onGroupByChange, groupByOptions);\n      const searchSpec = getInputSpec(\"search\", \"search\", inputTypes.TEXT, \"Search\", this.onSearchChange, undefined, placeholders.SEARCH);\n      return (\n        <div className=\"App container\">\n            <div className=\"row\">\n              <div className=\"col-sm-10\">ToDo App</div>\n              <div className=\"col-sm-2\"><GenericButton label=\"+\" color=\"primary\" onClick={this.toggleModal.bind(this, modalModes.NEW)}/></div>\n            </div>\n            <div className=\"row\">\n                <div className=\"col-sm-12 col-md-4\"><GenericInput value={groupBy || groupTypes.NONE} {...groupBySpec}/></div>\n                <div className=\"col-sm-12 col-md-8\"><GenericInput value={search || \"\"}{...searchSpec}/></div>\n            </div>\n        </div>\n      );\n    }\n\n    onSearchChange = (evt) => {\n        this.setState({search: evt.target.value});\n    }\n\n    onGroupByChange = (evt) => {\n        this.setState({groupBy: evt.target.value});\n    }\n\n    toggleModal = (mode) => {\n        switch(mode) {\n            case modalModes.NEW:\n                break;\n            case modalModes.EDIT:\n                break;\n            case modalModes.READ_ONLY:\n                break;\n        }\n    }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}